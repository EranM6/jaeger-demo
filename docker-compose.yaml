version: "3.8"
services:
    spring-1:
        container_name: trigger
        build:
            context: ./spring-1
            dockerfile: ../Dockerfile-java
        image: trigger:latest
        expose:
            - "8080"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=collector
            - JAEGER_AGENT_PORT=4317
        networks:
            - jaeger-example
    spring-2:
        container_name: animal
        build:
            context: ./spring-2
            dockerfile: ../Dockerfile-java
        image: animal:latest
        expose:
            - "9000"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=collector
            - JAEGER_AGENT_PORT=4317
        networks:
            - jaeger-example
    spring-3:
        container_name: scientist
        build:
            context: ./spring-3
            dockerfile: ../Dockerfile-java
        image: scientist:latest
        expose:
            - "8090"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=collector
            - JAEGER_AGENT_PORT=4317
        networks:
            - jaeger-example
    quarkus-1:
        container_name: users
        build:
            context: ./quarkus-1
            dockerfile: ./src/main/docker/Dockerfile.jvm
        image: users:latest
        expose:
            - "8080"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=collector
            - JAEGER_AGENT_PORT=4317
        networks:
            - jaeger-example
    quarkus-2:
        container_name: quarkus2
        build:
            context: ./quarkus-2
            dockerfile: ./src/main/docker/Dockerfile.jvm
        image: quarkus2:latest
        expose:
            - "8080"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=collector
            - JAEGER_AGENT_PORT=4317
        networks:
            - jaeger-example
    node-2:
        container_name: node2
        build:
            context: ./nodejs-2
            dockerfile: ../Dockerfile-node
        image: node2:latest
        expose:
            - "3000"
        restart: unless-stopped
        environment:
            - MONGO_CONN_STRING=mongodb://mongodb:27017
            - JAEGER_AGENT_HOST=jaeger
            - JAEGER_AGENT_PORT=4318
            - PROFILE=prod
        networks:
            - jaeger-example
    graphql:
        container_name: graphql
        build:
            context: ./graphql
            dockerfile: ../Dockerfile-node
        image: graphql:latest
        ports:
            - "8080:3000"
        restart: unless-stopped
        environment:
            - JAEGER_AGENT_HOST=jaeger
            - JAEGER_AGENT_PORT=4318
            - PROFILE=prod
        networks:
            - jaeger-example
    jaeger:
        container_name: jaeger
        image: jaegertracing/all-in-one:1.38
        ports:
            - "6831:6831/udp"
            - "6832:6832/udp"
            - "5778:5778"
            - "16686:16686"
#            - "4317:4317"
            - "4318:4318"
            - "14250:14250"
            - "14268:14268"
            - "14269:14269"
            - "9411:9411"
        environment:
            - COLLECTOR_ZIPKIN_HOST_PORT=:9411
            - COLLECTOR_OTLP_ENABLED=true
            - JAEGER_DISABLED=true
        networks:
            - jaeger-example
    otel-collector:
        container_name: collector
        image: otel/opentelemetry-collector:latest
        command: ["--config=/etc/otel-collector-config.yaml"]
        volumes:
            - ./config/otel-collector.yaml:/etc/otel-collector-config.yaml:Z
        ports:
            - "13133:13133" # Health_check extension
            - "4317:4317"   # OTLP gRPC receiver
        networks:
            - jaeger-example
    prom:
        container_name: scraper
        image: prom/prometheus:latest
        ports:
            - "9090:9090"
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        volumes:
            - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        networks:
            - jaeger-example
    grafana:
        container_name: viewer
        image: grafana/grafana:latest
        ports:
            - "3000:3000"
        volumes:
            - ./config/grafana:/etc/grafana/provisioning/datasources
            - grafana_data:/var/lib/grafana
        networks:
            - jaeger-example
    mongodb:
        image: mongo
        container_name: mongodb
        environment:
            - PUID=1000
            - PGID=1000
        volumes:
            - ./config/mongodb-data:/data/db
        ports:
            - "27018:27017"
        restart: unless-stopped
        networks:
            - jaeger-example
networks:
    jaeger-example:
        driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}